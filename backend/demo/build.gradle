plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    
    // WebFlux for WebClient (Gemini API 호출용)
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    runtimeOnly 'com.h2database:h2'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    
    // Gson for JSON processing
    implementation 'com.google.code.gson:gson:2.10.1'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    runtimeOnly 'org.postgresql:postgresql'
    
}

tasks.named('test') {
    useJUnitPlatform()
}

// ★★★ 컴파일러 설정 최종본 ★★★
tasks.withType(JavaCompile) {
    options.compilerArgs += '-parameters'
    options.encoding = 'UTF-8'
}

// 실행 불가능한 -plain.jar 파일은 생성하지 않도록 설정
jar {
    enabled = false
}

// Frontend build settings
def frontendDir = new File(project.projectDir, '../../frontend/my-react-app')

task installFrontend(type: Exec) {
    workingDir frontendDir
    commandLine 'npm', 'install'
}

task buildFrontend(type: Exec) {
    dependsOn installFrontend
    workingDir frontendDir
    commandLine 'npm', 'run', 'build'
}

task copyFrontend(type: Copy) {
    dependsOn buildFrontend
    from new File(frontendDir, 'build')
    into new File(project.projectDir, 'src/main/resources/static')
}

processResources.dependsOn copyFrontend
